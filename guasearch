#!/bin/bash
############################################################

_help()
{
cat <<-END
#########################################################################
# Author: alf149                                                        #
# Scriptname: guaserch version 1.0.0                                    #
# You'll find last version at https://github.com/alf149/guaserch        #
#                                                                       #
# Uses jq as json handler                                               #
#                                                                       #
#########################################################################

Syntax: scriptTemplate [-g|h|v|V]
options:
-h     Print this Help.
-d     Domain - Get active domain certificates info from guasearch.sh
       -d <DOMAIN> 
-l     List - like -d but for at list of domains in search/domain_list     
END
}

### Set variables
scriptname='guasearch'
runtime=$(date +"%Y_%m_%d_%H_%M_%S")

### Functions

_cleantemp() {
    if [ -d "${tempdir}" ];then
        rm -rf "${tempdir}"
    fi
}

_init() {
    mkdir -p search
    rm search/search*.csv 2> /dev/null
    #touch search/domain_list
}

_combine() {
    # combine all csv files, 
    awk 'FNR==1 && NR!=1{next;}{print}' search/search_*.csv >> search/domain_merged.out
    cp search/domain_merged.out search/domain_merged__${runtime}.csv
    rm search/domain_merged.out
    echo "wiew result in search/domain_merged__${runtime}.csv"
}

_domainsearchdata(){
   domain=$1

   # Define temp dir and tempifile
   tempdir=".${scriptname}.$$.tmp"
   if [ ! -d "${tempdir}" ];then
         mkdir "${tempdir}"
   fi
   tempfile="${tempdir}/${domain}.$$.rl.tmp"

   echo "${runtime} - Checking GUAID for ${domain}"
   echo 
   echo "--------"
   echo "Results for $domain, more info in search/search_${domain}_${runtime}.csv "
   search_res=$(curl -Ls http://${domain} | grep -ioE "UA-[0-9]{1,8}-[0-9]{1,1}") 

   # save to csv file
   echo "Domain;GUA-ID" >> search/search_${domain}_${runtime}.csv
   echo $domain";"$search_res >> search/search_${domain}_${runtime}.csv


   _cleantemp         
}

### Get the options - menu
while getopts "hcl :d:" option; do
   case $option in
      h) # display Help
        _help
        exit;;

      d) # Domain
        _init
        _domainsearchdata ${OPTARG}
        exit;;

      l) # List of domains
        _init
        FILE=search/domain_list
        if test -f "$FILE"; then
        cat "$FILE" | while read LREAD
        do
            if [[ ( ${LREAD} != "" ) ]]; then 
                _domainsearchdata ${LREAD}
            fi
        done
        fi 
        _combine
        exit;;

      c) #clen temp folders
        _init
        exit;;
               
     \?) # Invalid option
        echo "Error: Invalid option"
        _help
        exit;;
   esac
done
